package trees;

import java.io.*;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import trees.AVL.*;

public class MainGUI extends javax.swing.JFrame {

    static String HostPath; // A string of the path that will be used to create the output file
    static ArrayList<String> Errors = new ArrayList<>(); //An array of errors that will be used to store the erorr if one occours
    String newline = System.getProperty("line.separator");

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                CmdFileLoad = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                CmdFileLoad.setBackground(new java.awt.Color(255, 51, 51));
                CmdFileLoad.setFont(new java.awt.Font("Open Sans Semibold", 0, 21)); // NOI18N
                CmdFileLoad.setText("Browse");
                CmdFileLoad.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                CmdFileLoadActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(252, Short.MAX_VALUE)
                                .addComponent(CmdFileLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(248, 248, 248))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(163, 163, 163)
                                .addComponent(CmdFileLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(189, Short.MAX_VALUE))
                );

                pack();
                setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents
    /**
     * When the button is clicked a file getter opens and this starts the
     * program, the program checks to see if nothing has been entered of if the
     * user pressed the cancel button.
     *
     * @param evt the action listener
     */
    private void CmdFileLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdFileLoadActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(this);
        File host = chooser.getSelectedFile();
        if (host == null) {
            return;
        }
        File main = ConvertFile(host.getAbsolutePath());
        HostPath = host.getAbsolutePath();
        String HostName = host.getName();
        HostPath = HostPath.substring(0, HostPath.length() - HostName.length());
        HostPath += "Parker_AVLTreeResult.txt";
        ReadFile(main);

    }//GEN-LAST:event_CmdFileLoadActionPerformed

    public void ReadFile(File file) {
        try {
            Scanner Reader = new Scanner(file);
            String First = Reader.next().toUpperCase();
            if (First.contains("RedBlack")) {
                //Needs to be implemented
            } else if (First.contains("AVL")) {
                AVLTree tree = new AVLTree();
                tree = LoadAVLTree(file, tree);
                Reader.close();

            } else {
                System.out.println("Invalid First Line");
            }

        } catch (FileNotFoundException fnfe) {
            System.out.println("File Not Found.");

        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, "Error in file writeing", ex);
        }

    }

    public AVLTree LoadAVLTree(File file, AVLTree tree) throws FileNotFoundException, IOException {
        String output = "";
        Errors = new ArrayList<>();
        Scanner Reader = new Scanner(file);
        String Line;
        String[] TempAry;
        Reader.nextLine();
        while (Reader.hasNextLine()) {
            Line = Reader.nextLine();
            TempAry = Line.split(" ");
            if (TempAry.length == 2) {
                if (TempAry[0].equals("ADD")) {
                    String dat = TempAry[1];
                    tree.root = tree.insert(tree.root, Integer.valueOf(dat));
                } else if (TempAry[0].equals("REM")) {
                    String dat = TempAry[1];
                    tree.root = tree.deleteNode(tree.root, Integer.valueOf(dat), tree.root);
                } else if (TempAry[0].equals("PRINT")) {
                    if (TempAry[1].equals("PRE")) {
                        output += "PRE: " + tree.createOutput("PRE", tree) + newline;
                    } else if (TempAry[1].equals("IN")) {
                        output += "IN: " + tree.createOutput("IN", tree) + newline;

                    } else if (TempAry[1].equals("POST")) {
                        output += "POST: " + tree.createOutput("POST", tree) + newline;

                    } else {
                        Errors.add("The PRINT command " + TempAry[1] + " is not a valid print command.");
                    }

                } else {
                    Errors.add("The command " + TempAry[0] + " is not a valid command.");
                    System.out.println("Error in AVLTreeList");

                }
            } else {
                Errors.add("The command " + TempAry[0] + " is not a valid command.");
                System.out.println("Error 2 in AVLTreeList");

            }

        }
        PrintToFile(output);
        return tree;
    }

    /**
     * This method hasent been implemented yet it does nothing in the program.
     *
     * @param file
     * @param tree
     * @return
     * @throws FileNotFoundException
     * @throws IOException
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
                new MainGUI().setVisible(true);
        });
    }

    /**
     * Converts any txt file to the UTF 8 encodeing by internaly createing a
     * copy of the user entered file and writeing the same text in the UTF-8
     * format. The program then reads from that file.
     *
     * @param path The path of the file that is requested to be used.
     * @return the file thats in the root directory in UTF-8 Format
     */
    public static File ConvertFile(String path) {

        try {
            InputStream HostFile = new FileInputStream(path);
            Reader file = new InputStreamReader(HostFile, Charset.forName("Cp1252"));
            PrintWriter writer = new PrintWriter(".\\Temp.txt", "UTF-8");

            while (file.ready()) {
                writer.print((char) file.read());
            }

            Scanner TempFile = new Scanner(new File(".\\Temp.txt"));

            writer.close();
            TempFile.close();
            HostFile.close();
            file.close();
            TempFile.close();

        } catch (FileNotFoundException fnfe) {
            System.out.println("File Not Found error in converting ");

        } catch (IOException IOerr) {
            System.out.println("Error code 1");
        }

        File main = new File(".\\Temp.txt");

        return main;
    }


    public void PrintToFile(String str) throws IOException {
        FileWriter fw = new FileWriter(HostPath, true);
        BufferedWriter bw = new BufferedWriter(fw);
        PrintWriter out = new PrintWriter(bw);
        out.append(str);
        for(int i = 0; i < Errors.size(); i++){
            out.append(Errors.get(i));
        }
        out.close();
        bw.close();
        fw.close();

    }


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton CmdFileLoad;
        // End of variables declaration//GEN-END:variables
}
